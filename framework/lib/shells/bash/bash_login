# Loads Dot runtime for a user running the Bash shell, running plugin scripts
# for a "login" shell.
#
# Your ~/.bash_login or ~/.bash_profile should be a symlink to this file.
#
# Do not make changes to this file -- use Dot plugins!

__file__="$HOME/.bash_login"

if [ ! -L "$__file__" ]; then
  echo "ERROR: $__file__ must be a symlink to lib/shells/bash/bash_login in the Dot framework"
  echo "ERROR: You should not execute/source this script directly!"
  echo "ERROR: Skipping initialization of Dot"
else
  export DOT_FRAMEWORK_DIR="$(cd "$(dirname "$(dirname "$(dirname "$(dirname "$(readlink "$__file__")")")")")" && pwd)"
  export DOT_HOME="$(dirname "$DOT_FRAMEWORK_DIR")"

  export DOT_SHELL=bash
  export DOT_BACKUPS_DIR="$DOT_HOME/.backups"
  export DOT_PLUGINS_DIR="$DOT_HOME/plugins"
  export DOT_PATH_DIR="$DOT_HOME/.path"

  export PATH="$DOT_FRAMEWORK_DIR/libexec:$PATH"
  export PATH="$DOT_PATH_DIR:$PATH"

  source "$DOT_FRAMEWORK_DIR/lib/shells/bash/load_env"

  # We use globs in many places expecting them to return an empty list rather
  # than fail if no matches are found
  shopt -s nullglob

  # Use cached load order created during installation
  DOT_PLUGINS_DEPENDENCY_ORDER=($(cat "$DOT_HOME/.cache/plugin_load_order"))

  for plugin in ${DOT_PLUGINS_DEPENDENCY_ORDER[@]}; do
    # Define variable so plugin's interactive shell script can use it for convenience
    DOT_PLUGIN_DIR="$DOT_PLUGINS_DIR/$plugin"

    # Load any environment variables defined in relevant `env` directories
    for env_path in "$DOT_PLUGIN_DIR/env/"{,login/}*; do
      if [ -f "$env_path" ]; then
        if ! load_env "$env_path"; then
          echo "ERROR: Failed to load environment variables for plugin $plugin. Halting"
          exit 1
        fi
      fi
    done

    for script in "$DOT_PLUGIN_DIR/lib/login/"*.bash; do
      if ! source "$script"; then
        echo "ERROR: Problem sourcing login script $script for plugin $plugin"
      fi
    done
  done

  if [ -e "$HOME/.bash_login.local" ]; then
    source "$HOME/.bash_login.local"
  fi

  # Bash doesn't source bashrc when starting a login shell, even when the
  # shell is interactive. This is odd when compared to other shells, so we
  # explicitly source bashrc here if we're in an interactive shell.
  if [[ $- == *i* ]]; then
    source "$HOME/.bashrc"
  fi
fi
